diff --git a/cmd/sriov/main.go b/cmd/sriov/main.go
index 19fb5bf9..018fb066 100644
--- a/cmd/sriov/main.go
+++ b/cmd/sriov/main.go
@@ -14,6 +14,7 @@ import (
 	"github.com/intel/sriov-cni/pkg/config"
 	"github.com/intel/sriov-cni/pkg/sriov"
 	"github.com/intel/sriov-cni/pkg/utils"
+	"github.com/intel/sriov-cni/pkg/vdpa"
 	"github.com/vishvananda/netlink"
 )
 
@@ -86,6 +87,8 @@ func cmdAdd(args *skel.CmdArgs) error {
 
 	// skip the IPAM allocation for the DPDK
 	if netConf.DPDKMode {
+		vdpa.SaveRemoteConfig(netConf, args, result)
+
 		// Cache NetConf for CmdDel
 		if err = utils.SaveNetConf(args.ContainerID, config.DefaultCNIDir, args.IfName, netConf); err != nil {
 			return fmt.Errorf("error saving NetConf %q", err)
diff --git a/glide.yaml b/glide.yaml
index 4a3d9b85..128e1064 100644
--- a/glide.yaml
+++ b/glide.yaml
@@ -14,6 +14,12 @@ import:
   - pkg/ip
   - pkg/ipam
   - pkg/ns
+- package: github.com/intel/userspace-cni-network-plugin
+  version: master
+  subpackages:
+  - pkg/annotations
+  - pkg/k8sclient
+  - pkg/types
 - package: github.com/onsi/ginkgo
   version: 7f8ab55aaf3b86885aa55b762e803744d1674700
   subpackages:
@@ -45,6 +51,10 @@ import:
   - matchers/support/goraph/node
   - matchers/support/goraph/util
   - types
+- package: github.com/redhat-nfvpe/vdpa-deployment
+  version: master
+  subpackages:
+  - vdpadpdk
 - package: github.com/vishvananda/netlink
   version: 07ace697bea4b7641fbc6dcf7c90432c6b8bea5c
   subpackages:
diff --git a/pkg/sriov/sriov.go b/pkg/sriov/sriov.go
index 4230ca5f..1004bada 100644
--- a/pkg/sriov/sriov.go
+++ b/pkg/sriov/sriov.go
@@ -102,14 +102,14 @@ func (n *MyNetlink) LinkSetVfState(link netlink.Link, vf int, state uint32) erro
 }
 
 type pciUtils interface {
-	getSriovNumVfs(ifName string) (int, error)
+	getSriovNumVfs(ifName string) (bool, int, error)
 	getVFLinkNamesFromVFID(pfName string, vfID int) ([]string, error)
 	getPciAddress(ifName string, vf int) (string, error)
 }
 
 type pciUtilsImpl struct{}
 
-func (p *pciUtilsImpl) getSriovNumVfs(ifName string) (int, error) {
+func (p *pciUtilsImpl) getSriovNumVfs(ifName string) (bool, int, error) {
 	return utils.GetSriovNumVfs(ifName)
 }
 
diff --git a/pkg/sriov/sriov_test.go b/pkg/sriov/sriov_test.go
index 9eec016a..2b062fb2 100644
--- a/pkg/sriov/sriov_test.go
+++ b/pkg/sriov/sriov_test.go
@@ -236,7 +236,7 @@ func (_m *mockPciUtils) getPciAddress(ifName string, vf int) (string, error) {
 }
 
 // getSriovNumVfs provides a mock function with given fields: ifName
-func (_m *mockPciUtils) getSriovNumVfs(ifName string) (int, error) {
+func (_m *mockPciUtils) getSriovNumVfs(ifName string) (bool, int, error) {
 	ret := _m.Called(ifName)
 
 	var r0 int
@@ -253,7 +253,7 @@ func (_m *mockPciUtils) getSriovNumVfs(ifName string) (int, error) {
 		r1 = ret.Error(1)
 	}
 
-	return r0, r1
+	return false, r0, r1
 }
 
 // getVFLinkNamesFromVFID provides a mock function with given fields: pfName, vfID
diff --git a/pkg/utils/utils.go b/pkg/utils/utils.go
index 0bf54ae8..23a89a1e 100644
--- a/pkg/utils/utils.go
+++ b/pkg/utils/utils.go
@@ -21,41 +21,69 @@ var (
 )
 
 // GetSriovNumVfs takes in a PF name(ifName) as string and returns number of VF configured as int
-func GetSriovNumVfs(ifName string) (int, error) {
+func GetSriovNumVfs(ifName string) (bool, int, error) {
 	var vfTotal int
+	var vdpaFlag bool
 
 	sriovFile := filepath.Join(NetDirectory, ifName, "device", sriovConfigured)
 	if _, err := os.Lstat(sriovFile); err != nil {
-		return vfTotal, fmt.Errorf("failed to open the sriov_numfs of device %q: %v", ifName, err)
+		// If doesn't exist, try to remove the 'virtio0' from the link/
+		sriovFile = filepath.Join(NetDirectory, ifName, "device")
+		sriovFile, err = filepath.EvalSymlinks(sriovFile)
+		if err != nil {
+			return vdpaFlag, vfTotal, fmt.Errorf("failed to EvalSymlinks for device %s Path %s : %v", ifName, sriovFile, err)
+		}
+		sriovFile = filepath.Join(sriovFile, "..", sriovConfigured)
+
+		if _, err := os.Lstat(sriovFile); err != nil {
+			return vdpaFlag, vfTotal, fmt.Errorf("failed to open the sriov_numfs of device %s Path %s : %v", ifName, sriovFile, err)
+		}
+
+		vdpaFlag = true
 	}
 
 	data, err := ioutil.ReadFile(sriovFile)
 	if err != nil {
-		return vfTotal, fmt.Errorf("failed to read the sriov_numfs of device %q: %v", ifName, err)
+		return vdpaFlag, vfTotal, fmt.Errorf("failed to read the sriov_numfs of device %q: %v", ifName, err)
 	}
 
 	if len(data) == 0 {
-		return vfTotal, fmt.Errorf("no data in the file %q", sriovFile)
+		return vdpaFlag, vfTotal, fmt.Errorf("no data in the file %q", sriovFile)
 	}
 
 	sriovNumfs := strings.TrimSpace(string(data))
 	vfTotal, err = strconv.Atoi(sriovNumfs)
 	if err != nil {
-		return vfTotal, fmt.Errorf("failed to convert sriov_numfs(byte value) to int of device %q: %v", ifName, err)
+		return vdpaFlag, vfTotal, fmt.Errorf("failed to convert sriov_numfs(byte value) to int of device %q: %v", ifName, err)
 	}
 
-	return vfTotal, nil
+	return vdpaFlag, vfTotal, nil
 }
 
 // GetVfid takes in VF's PCI address(addr) and pfName as string and returns VF's ID as int
 func GetVfid(addr string, pfName string) (int, error) {
 	var id int
-	vfTotal, err := GetSriovNumVfs(pfName)
+	var vfDir string
+
+	vdpaFlag, vfTotal, err := GetSriovNumVfs(pfName)
 	if err != nil {
 		return id, err
 	}
+
 	for vf := 0; vf <= vfTotal; vf++ {
-		vfDir := filepath.Join(NetDirectory, pfName, "device", fmt.Sprintf("virtfn%d", vf))
+		if vdpaFlag == false {
+			vfDir = filepath.Join(NetDirectory, pfName, "device", fmt.Sprintf("virtfn%d", vf))
+		} else {
+			//vfDir = filepath.Join(NetDirectory, pfName, "device/../../..", fmt.Sprintf("virtfn%d", vf))
+
+			vfDir = filepath.Join(NetDirectory, pfName, "device")
+			vfDir, err = filepath.EvalSymlinks(vfDir)
+			if err != nil {
+				continue
+			}
+			vfDir = filepath.Join(vfDir, "..", fmt.Sprintf("virtfn%d", vf))
+
+		}
 		_, err := os.Lstat(vfDir)
 		if err != nil {
 			continue
@@ -77,7 +105,12 @@ func GetPfName(vf string) (string, error) {
 	pfSymLink := filepath.Join(SysBusPci, vf, "physfn", "net")
 	_, err := os.Lstat(pfSymLink)
 	if err != nil {
-		return "", err
+		// Check for 'virtio0' subdirectory
+		pfSymLink = filepath.Join(SysBusPci, vf, "physfn", "virtio0", "net")
+		_, err := os.Lstat(pfSymLink)
+		if err != nil {
+			return "", err
+		}
 	}
 
 	files, err := ioutil.ReadDir(pfSymLink)
diff --git a/pkg/utils/utils_test.go b/pkg/utils/utils_test.go
index 3896e573..e4ac1e7d 100644
--- a/pkg/utils/utils_test.go
+++ b/pkg/utils/utils_test.go
@@ -9,12 +9,12 @@ var _ = Describe("Utils", func() {
 
 	Context("Checking GetSriovNumVfs function", func() {
 		It("Assuming existing interface", func() {
-			result, err := GetSriovNumVfs("enp175s0f1")
+			_, result, err := GetSriovNumVfs("enp175s0f1")
 			Expect(result).To(Equal(2), "Existing sriov interface should return correct VFs count")
 			Expect(err).NotTo(HaveOccurred(), "Existing sriov interface should not return an error")
 		})
 		It("Assuming not existing interface", func() {
-			_, err := GetSriovNumVfs("enp175s0f2")
+			_, _, err := GetSriovNumVfs("enp175s0f2")
 			Expect(err).To(HaveOccurred(), "Not existing sriov interface should return an error")
 		})
 	})
